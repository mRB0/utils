#!/usr/bin/env bash

# This is a batch version of convert.  The arguments are the files to
# be converted (no additional flags/switches supported), and the
# filenames are chosen automatically.  Otherwise, behaves the same as
# convert.

FFMPEG=ffmpeg
AACENC='/cygdrive/c/users/mrb/Documents/apps/NeroAACCodec/win32/neroAacEnc.exe'

n=0
abort=
notes=

for infile in "$@"; do
    
    if [[ ! -e "$infile" ]]; then
        echo "Fatal: $infile doesn't exist."
        abort=yeah
        continue
    fi
    
    infiles[$n]="$infile"
    outfile="$(echo "$infile" | sed -r 's/(\.[^.]+)?$/.mp4/i')"
    
    shopt -s nocasematch
    if [[ $outfile == $infile ]]; then
        outfile="$(echo "$infile" | sed -r 's/(\.[^.]+)?$/ reencode\1/')"
        notes="${notes}File \"$infile\" already ends in .mp4; output will be to \"$outfile\"\n"
    fi
    shopt -u nocasematch
    
    if [[ -e $outfile ]]; then
        echo "Fatal: $outfile exists.  Not overwriting."
        abort=yeah
        continue
    fi
    
    outfiles[$n]="$outfile"
    n=$(($n + 1))
done

if [[ -n $abort ]]; then
    exit 1
fi

if [[ -n $notes ]]; then
    echo "Notes before proceeding:"
    echo
    echo -e "$notes"
    echo 'Press enter to continue.'
    read
    notes="${notes}\n"
fi

for ((i=0; $i < $n; i=$i + 1)); do
    infile="${infiles[$i]}"
    outfile="${outfiles[$i]}"
    
    base="$(basename "$infile")"
    
    wavfile="/tmp/""$base"".wav"
    aacfile="/tmp/""$base"".m4a"
    
    echo
    echo "$i:" "$infile" "->" "$outfile"
    date
    echo
    
    notes="${notes}""$infile"" -> ""$outfile""\n"
    
    #
    # Extract audio from original video
    #
    
    if [[ -e "$wavfile" ]]; then
        rm "$wavfile"
    fi
    
    "$FFMPEG" -i "$(cygpath -aw "$infile")" -map 0:a:0 "$(cygpath -aw "$wavfile")"
    if [[ $? != 0 ]]; then
        notes="${notes}Error extracting audio from $infile\n"
        continue
    fi
    
    #
    # Re-encode audio as AAC
    #
    
    "$AACENC" -q 0.50 -if "$(cygpath -aw "$wavfile")" -of "$(cygpath -aw "$aacfile")"
    if [[ $? != 0 ]]; then
        notes="${notes}Error AAC-encoding extracted audio in $wavfile (not deleted)\n"
        continue
    fi
    
    rm "$wavfile"
    
    #
    # Re-encode video
    #
    # Summary of options:
    #   Use video streams from input file 0: -map 0:v
    #   Use video streams from input file 1: -map 1:a
    #   Audio metadata is copied from file 0, because it's more appropriate to the recording than the re-encoded aac.
    #   Copy video stream metadata from file 0 (0:s:v) and place in output stream video (..:s:v): -map_metadata:s:v 0:s:v 
    #   Copy audio stream metadata from file 0 (0:s:a) and place in output stream audio (..:s:v): -map_metadata:s:a 0:s:a
    #   Copy global metadata from input file 0: -map_metadata:g 0:g 
    #   Video quality (lower is better): -crf 23.0
    #   "veryslow" libx264 preset for highest quality encoding: -preset veryslow
    #   Copy audio (from file 1, thanks to -map 1:a) -codec:a copy
    #
    
    "$FFMPEG" -i "$(cygpath -aw "$infile")" -i "$(cygpath -aw "$aacfile")" -map 0:v -map 1:a -map_metadata:s:v 0:s:v -map_metadata:s:a 0:s:a -map_metadata:g 0:g -crf 23.0 -vcodec libx264 -pix_fmt yuv420p -preset veryslow -movflags faststart -codec:a copy -coder 1 -rc_lookahead 60 -threads 3 "$(cygpath -aw "$outfile")"
    if [[ $? != 0 ]]; then
        notes="${notes}Error transcoding $infile ($aacfile not deleted)\n"
        continue
    fi
    
    rm "$aacfile"

    #
    # Set creation time of the file to match the metadata
    #
    
    creation_time=$("$FFMPEG" -i "$(cygpath -aw "$outfile")" /dev/null 2>&1 | sed '/^ *creation_time *: \(.*\)/s//\1/p;d' | head -1)

    if [[ -n $creation_time ]]; then
        touch -d "$creation_time" "$outfile"
    fi
    
done

echo "Finished $(date)"

if [[ -n $notes ]]; then
    echo
    echo "Notes:"
    echo
    echo -e "$notes"
fi
